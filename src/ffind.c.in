/*
 * Filement Index
 * Copyright (C) 2015  Martin Kunev <martinkunev@gmail.com>
 *
 * This file is part of Filement Index.
 *
 * Filement Index is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation version 3 of the License.
 *
 * Filement Index is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Filement Index.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <fcntl.h>
#include <inttypes.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <unistd.h>

#include "base.h"
#include "arch.h"
#include "magic.h"
#include "path.h"
#include "findex.h"

// http://www.cyberciti.biz/faq/linux-unix-creating-a-manpage/

#define PATH_SIZE_MAX 4096

#define DB_PATH "/.cache/filement" /* database path relative to the home directory */

#define STRING(s) (s), sizeof(s) - 1

#define VERSION "0.1.0"

struct pattern
{
	const unsigned char *data;
	size_t length;
	size_t chars, asterisks;
};

static char *location = 0; // TODO support multiple search locations
static size_t location_length;
static uint64_t size_min = 0, size_max = UINT64_MAX;
static uint16_t type = 0;
static struct pattern pattern_path = {0}, pattern_name = {0};
static size_t exec_index = 0;
static uint32_t filecontent;

// TODO support -mtime
// TODO support mime type

// TODO option to check if a file is modified or missing

static int usage(int code)
{
	write(1, STRING(
"Usage: ffind <path> [filters] [-exec command ;]\n"
"\t-type\t Filter by file type\n"
"\t-name\t Filter by filename\n"
"\t-path\t Filter by path\n"
"\t-size\t Filter by size\n"
"\t-content Filter by content\n"
	));
	return code;
}

static int version(int code)
{
	write(1, STRING(
"ffind " VERSION "\n"
"Copyright (C) 2015  Martin Kunev <martinkunev@gmail.com>\n"
"License GPLv3: GNU GPL version 3 <http://gnu.org/licenses/gpl.html>\n"
"This is free software: you are free to change and redistribute it.\n"
"There is NO WARRANTY, to the extent permitted by law.\n"
	));
	return code;
}

static int match_internal(const unsigned char *restrict pattern, size_t pattern_length, size_t chars, size_t asterisks, const unsigned char *restrict string, size_t string_length)
{
	size_t pattern_index = 0, string_index = 0;

	// Discard strings that won't match because of their length.
	// This also ensures that (string_length - string_index) >= chars.
	if (string_length < chars) return 0;

	for(pattern_index = 0; pattern_index < pattern_length; ++pattern_index)
	{
		switch (pattern[pattern_index])
		{
		case '?':
			if (string_index == string_length) return 0; // no more string chars to consume
			string_index += 1;
			chars -= 1;
			break;

		case '*':
			{
				size_t asterisk_chars = (string_length - string_index) - chars;
				if (asterisks > 1)
				{
					// The first asterisk can match [0, asterisk_chars] characters.
					// Try each of these values in descending order until a match succeeds.
					// Use recursive call to match_internal() to match the rest of the string with the rest of the pattern.
					pattern += pattern_index + 1;
					pattern_length -= pattern_index + 1;
					string += string_index;
					string_length -= string_index;
					do
					{
						if (match_internal(pattern, pattern_length, chars, asterisks - 1, string + asterisk_chars, string_length - asterisk_chars))
							return 1;
					} while (asterisk_chars--);
					return 0;
				}
				else
				{
					// The only possibility for the asterisk is to match asterisk_chars characters.
					string_index += asterisk_chars;
					// asterisks -= 1; // asterisks will never be used again
				}
			}
			break;

		// TODO support this
		/*case '[':
			pattern_index += 1;
			break;*/

		case '\\':
			pattern_index += 1;
			// pattern_init() ensures pattern_index is in the bounds of pattern
		default:
			if (string_index == string_length) return 0; // no more string chars to consume
			if (pattern[pattern_index] != string[string_index]) return 0; // mismatch
			string_index += 1;
			chars -= 1;
			break;
		}
	}

	return (string_index == string_length);
}
static inline int match(const struct pattern *restrict pattern, const unsigned char *restrict data, size_t length)
{
	return match_internal(pattern->data, pattern->length, pattern->chars, pattern->asterisks, data, length);
}

// Initializes struct pattern with data with the specified length.
// Counts the * and the non-* characters in the pattern.
// Returns whether the pattern is valid.
static int pattern_init(struct pattern *restrict pattern, const unsigned char *restrict data, size_t length)
{
	size_t index;

	pattern->data = data;
	pattern->length = length;
	pattern->chars = 0;
	pattern->asterisks = 0;

	for(index = 0; index < pattern->length; ++index)
	{
		switch (pattern->data[index])
		{
		case '*':
			pattern->asterisks += 1;
			break;

		// TODO support this
		/*case '[':
			do if (++index == pattern->length) return 0;
			while ((pattern->data[index] != ']') || (pattern->data[index - 1] == '\\'));
			pattern->chars += 1;
			break;*/

		case '\\':
			if (++index == pattern->length) return 0;
		default:
			pattern->chars += 1;
			break;
		}
	}

	return 1;
}

static int print(const char *path, size_t length, char *argv[])
{
	write(1, path, length);
	write(1, "\n", 1);
	return 0;
}

static int execute(const char *path, size_t length, char *argv[])
{
	if (fork())
	{
		int status;
		waitpid(0, &status, 0);
		return status;
	}
	else
	{
		size_t index = exec_index;

		unsigned count;
		char *buffer, *end;

		// The code below relies on the fact that each argument is NUL-terminated.
		do
		{
			// find the number of occurrences of the sequence {} in the argument
			count = 0;
			end = argv[index];
			while (*end)
			{
				if ((end[0] == '{') && (end[1] == '}'))
				{
					count += 1;
					end += 2;
					continue;
				}

				end += 1;
			}

			// replace each occurrence of {} (if any)
			if (count)
			{
				// WARNING: This memory is never freed because it is passed to execvp().
				buffer = alloc((end - argv[index]) + count * (length - 2) + 1);

				end = argv[index];
				argv[index] = buffer;

				while (*end)
				{
					if ((end[0] == '{') && (end[1] == '}'))
					{
						memcpy(buffer, path, length);
						buffer += length;
						end += 2;
						continue;
					}

					*buffer++ = *end++;
				}
				*buffer = 0;
			}
		} while (argv[++index]);

		if (execvp(argv[exec_index], argv + exec_index))
			_exit(1); // TODO
	}
}

static int find(const unsigned char *db, size_t dbsize, int (*callback)(const char *, size_t, char *[]), char *argv[])
{
	struct file file;
	uint16_t raw;
	uint32_t raw32;
	uint64_t raw64;
	const unsigned char *path;

	size_t offset, left;

	int status;

	// Check file header.
	if (dbsize < (sizeof(HEADER) - 1)) return ERROR_INPUT; // unexpected EOF
	if (memcmp(db, HEADER, sizeof(HEADER) - 1)) return ERROR_INPUT;
	offset = sizeof(HEADER) - 1;

	while (left = dbsize - offset)
	{
		if (left < sizeof(struct file)) return ERROR_INPUT; // unexpected EOF
		memcpy((void *)&file, db + offset, sizeof(file));
		offset += sizeof(file);

		raw = file.path_length;
		endian_big16(&file.path_length, &raw);
		// if (!file.path_length) ;

		left = dbsize - offset;
		if (left < file.path_length) return ERROR_INPUT; // unexpected EOF
		path = db + offset;
		// if (path[0] != '/') ;
		offset += file.path_length;

		raw = file.mode;
		endian_big16(&file.mode, &raw);

		raw32 = file.content;
		endian_big32(&file.content, &raw32);

		raw64 = file.mtime;
		endian_big64(&file.mtime, &raw64);

		raw64 = file.size;
		endian_big64(&file.size, &raw64);

		// Apply the filters.
		if ((file.path_length < location_length) || memcmp(path, location, location_length)) continue;
		if ((file.size < size_min) || (size_max < file.size)) continue;
		if (type && ((file.mode & S_IFMT) != type)) continue;
		if (filecontent && ((file.content >> 16) != (filecontent >> 16))) continue;
		if (pattern_path.data && !match(&pattern_path, path, file.path_length)) continue;
		if (pattern_name.data)
		{
			// Find the basename of the file and match it against the pattern.
			size_t index;
			for(index = file.path_length - 1; path[index] != '/'; --index)
				;
			if (!match(&pattern_name, path + index + 1, file.path_length - index - 1))
				continue;
		}

		status = callback((const char *)path, file.path_length, argv); // TODO fix this cast
		if (status) return status;
	}

	return 0;
}

// TODO ? indicate error conditions
static unsigned char *db_open(struct stat *info)
{
	char db_path[PATH_SIZE_MAX];
	int db;

	unsigned char *buffer;

	if (db_path_init(db_path)) return 0;

	db = open(db_path, O_RDONLY);
	if (db < 0) return 0;

	if (fstat(db, info) < 0)
	{
		close(db);
		return 0;
	}

	buffer = mmap(0, info->st_size, PROT_READ, MAP_PRIVATE, db, 0);
	close(db);
	if (buffer == MAP_FAILED) return 0;

	return buffer;
}

static void db_close(unsigned char *restrict buffer, const struct stat *restrict info)
{
	munmap(buffer, info->st_size);
}

int main(int argc, char *argv[])
{
	size_t index;
	for(index = 1; index < argc; ++index)
	{
		// Parse filters.
		if (*argv[index] == '-')
		{
			if (!memcmp(argv[index] + 1, STRING("version")) || ((argv[index][1] == '-') && !memcmp(argv[index] + 2, STRING("version"))))
			{
				return version(0);
			}
			else if (!memcmp(argv[index] + 1, STRING("type")))
			{
				if (++index == argc) return usage(1);

				if (argv[index][1]) return usage(1);

				// TODO support OS-specific types (door, whiteout, etc.)
				switch (argv[index][0])
				{
				case 'f':
					type = S_IFREG;
					break;
				case 'd':
					type = S_IFDIR;
					break;
				case 'l':
					type = S_IFLNK;
					break;
				case 'b':
					type = S_IFBLK;
					break;
				case 'c':
					type = S_IFCHR;
					break;
				case 'p':
					type = S_IFIFO;
					break;
				case 's':
					type = S_IFSOCK;
					break;
				default:
					return usage(1);
				}
			}
			else if (!memcmp(argv[index] + 1, STRING("name")))
			{
				if (++index == argc) return usage(1);
				if (!pattern_init(&pattern_name, (const unsigned char *)argv[index], strlen(argv[index]))) return usage(1); // TODO fix the cast
			}
			else if (!memcmp(argv[index] + 1, STRING("path")))
			{
				if (++index == argc) return usage(1);
				if (!pattern_init(&pattern_path, (const unsigned char *)argv[index], strlen(argv[index]))) return usage(1); // TODO fix the cast
			}
			else if (!memcmp(argv[index] + 1, STRING("size")))
			{
				// WARNING: This option does not behave the same way as in find(1).

				if (++index == argc) return usage(1);

				char *position = argv[index];
				if ((*position == '+') || (*position == '-')) position += 1;

				char *end;
				uint64_t size = strtol(position, &end, 10);
				if (end == position) return usage(1); // there must be size
				if (end[0] && end[1]) return usage(1); // there must be no characters after the unit

				const uint64_t units[256] = {
					['T'] = 1024lu * 1024 * 1024 * 1024,
					['G'] = 1024lu * 1024 * 1024,
					['M'] = 1024lu * 1024,
					['K'] = 1024lu,
					['c'] = 1lu,
					['\0'] = 1lu,
				};
				uint64_t unit = units[(unsigned char)end[0]];
				if (!unit) return usage(1); // invalid unit

				// TODO size can cause overflow below
				if (argv[index][0] == '+')
				{
					size_min = size * unit;
				}
				else if (argv[index][0] == '-')
				{
					size_max = size * unit;
				}
				else
				{
					size_min = size * unit;
					size_max = size_min + unit - 1;
				}
			}
			else if (!memcmp(argv[index] + 1, STRING("content")))
			{
				if (++index == argc) return usage(1);

				if (!memcmp(argv[index], STRING("text")))
					filecontent = content_text;
				else if (!memcmp(argv[index], STRING("archive")))
					filecontent = content_archive;
				else if (!memcmp(argv[index], STRING("document")))
					filecontent = content_document;
				else if (!memcmp(argv[index], STRING("image")))
					filecontent = content_image;
				else if (!memcmp(argv[index], STRING("audio")))
					filecontent = content_audio;
				else if (!memcmp(argv[index], STRING("video")))
					filecontent = content_video;
				else if (!memcmp(argv[index], STRING("multimedia")))
					filecontent = content_multimedia;
				else
					return usage(1);
			}
			else if (!memcmp(argv[index] + 1, STRING("exec")))
			{
				exec_index = ++index;

				// Find command terminator (semicolon).
				// Replace it with NULL so that (argv + exec_index) can be passed directly to an exec function.
				while (1)
				{
					if (index == argc) return usage(1);
					if ((argv[index][0] == ';') && !argv[index][1])
					{
						if (index == exec_index) return usage(1);
						argv[index] = 0;
						break;
					}
					index += 1;
				}
			}
			else if (!memcmp(argv[index] + 1, STRING("print")))
			{
				exec_index = 0;
			}
			else return usage(1);
		}
		else
		{
			location = argv[index];
			location_length = strlen(location);
		}
	}
	if (!location) return usage(1);

	char path[PATH_SIZE_LIMIT];
	if (normalize(path, &location_length, location, location_length)) return -1; // TODO
	location = path;

	struct stat info;
	unsigned char *buffer = db_open(&info);
	if (!buffer) return -1; // TODO

	int status = find(buffer, info.st_size, (exec_index ? execute : print), argv);

	db_close(buffer, &info);

	if (status) return -1; // TODO

	return 0;
}
